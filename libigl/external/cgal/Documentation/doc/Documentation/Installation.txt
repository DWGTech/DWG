/*!
\page installation Installation
\cgalAutoToc
\authors Eric Berberich, Joachim Reichel, and Fernando Cacciola

\section installation_introduction Introduction
 
This document describes how to install \cgal on Windows, Unix-like systems, and MacOS X.

Ideally, setting up \cgal amounts to:

<PRE>
cd CGAL-\cgalReleaseNumber # go to \cgal directory
cmake . # configure \cgal
make # build the \cgal libraries
</PRE>

Compiling an example or a demo shipped with \cgal is similarly simple:

<PRE>
cd examples/Straight_skeleton_2 # go to an example directory
cmake -DCGAL_DIR=$HOME/CGAL-\cgalReleaseNumber . # configure the examples
make # build the examples 
</PRE>

<PRE>
cd demo/Straight_skeleton_2 # go to a demo directory
cmake -DCGAL_DIR=$HOME/CGAL-\cgalReleaseNumber . # configure the demos
make # build the demos 
</PRE>

Compiling an own non-shipped program is also close:

<PRE>
cd /path/to/program 
cgal_create_CMakeLists -s executable 
cmake -DCGAL_DIR=$HOME/CGAL-\cgalReleaseNumber . 
make
</PRE>

where the second line creates a `CMakeLists.txt` file (check
its options in Section \ref seccreate_cgal_CMakeLists for various details).

Note that, until CGAL 4.6, \ref seccreate_cgal_CMakeLists only recognized
source files ending in `.cpp` or `.C`; if the above fails on the `cmake` command
or produces an empty `Makefile`, check whether your source files go by such a name.
Recent versions find all source files ending in
`.cc`, `.cp`, `.cxx`, `.cpp`, `.CPP`, `.c++`, or `.C`.

In a less ideal world, you probably have to install CMake, a makefile
generator, and third party libraries. That is what this manual is about.

\section secprerequisites Prerequisites 

Installing \cgal requires a few components to be installed ahead: a
supported compiler (see Section \ref seccompilers, CMake, \sc{Boost}, and at least \sc{Gmp}, and \sc{Mpfr}; see 
Section \ref secessential3rdpartysoftware for more details on
essential third party software.

\section secshippedcgal OS Specific Installation

Some operating systems with package managers offer \cgal and its
essential third party software through the manager, 
for instance, Mac OS X, or some Linux distribution (e.g. Debian).
For Windows, an installer is provided.

\subsection sseccgalmacosxe CGAL on MAC OS X 

For instance, use macports in the following way:

<PRE>
sudo port install cgal
</PRE>

or if Qt5 are desired

<PRE>
sudo port install cgal +qt5 +universal +demos
</PRE>

The setup is similar for <a href="http://mxcl.github.com/homebrew/"><tt>homebrew</tt></a> .

\subsection sseccgaldebian CGAL on Linux 

For instance in debian/Ubuntu, use apt-get in the following way:

<PRE>
sudo apt-get install libcgal-dev
</PRE>

To get the demos use

<PRE>
sudo apt-get install libcgal-demo
</PRE>

Check the \cgal-FAQ for source repository of newest releases.

On other distributions, please consult your package manager documentation.

\subsection sseccgalwindows CGAL on Windows

You can download and run `CGAL-\cgalReleaseNumber``-Setup.exe` from https://www.cgal.org/download.html.
It is a self extracting executable that installs the \cgal source, and that allows you
to select and download some precompiled third party libraries. However, you will need to compile
the library using your favorite compiler.

A <a href="https://www.cgal.org/windows_installation.html">tutorial</a> is provided on how to proceed with Microsoft Visual Studio 2010.



\section secgettingcgal Downloading CGAL 

You can obtain the \cgal library from 
<A HREF="https://www.cgal.org/download.html">https://www.cgal.org/download.html</A>
and install it yourself.

After you have downloaded the file `CGAL-\cgalReleaseNumber``.tar.gz` containing the
\cgal sources, you have to unpack it. Under a Unix-like shell, use the
command:

<PRE>
tar xzf CGAL-\cgalReleaseNumber.tar.gz
</PRE>

In both cases the directory `CGAL-\cgalReleaseNumber` will be created. This directory
contains the following subdirectories:


| Directory   | Contents   | 
| :-----------| :----------|
| `auxiliary`  | precompiled \sc{Gmp} and \sc{Mpfr} for Windows |
| `cmake/modules` | modules for finding and using libraries |
| `config` |configuration files for install script |
| `demo` | demo programs (most of them need \sc{Qt}, geomview or other third-party products) |
| `doc_html` |documentation (HTML) | 
| `examples` | example programs |
| `include`  | header files |
| `scripts`  | some useful scripts (e.g. for creating CMakeLists.txt files) |
| `src`      | source files |


The directories `include/CGAL/CORE` and `src/CGALCore` contain a
distribution of the \sc{Core} library\cgalFootnote{<A HREF="http://www.cs.nyu.edu/exact/">`http://www.cs.nyu.edu/exact/`</A>} version 1.7 for
dealing with algebraic numbers. \sc{Core} is not part of \cgal and has its
own license.

The directory `include/CGAL/OpenNL` contains a distribution of the 
Open Numerical Library which provides solvers for sparse linear systems,
especially designed for the Computer Graphics community. \sc{OpenNL} is not part
of \cgal and has its own license.

The only documentation shipped with \cgal sources is the present
installation manual. The \cgal manual must be downloaded separately from
<A HREF="https://www.cgal.org/download.html">`https://www.cgal.org/download.html`</A>.

\section seccompilers Supported Compilers 

In order to build the \cgal libraries, you need a \cpp compiler. 
\cgal \cgalReleaseNumber is supported for the following compilers/operating systems:


| Compiler | Operating System |
| :------- | :--------------- |
|\sc{Gnu} `g++` 4.1 or later\cgalFootnote{<A HREF="http://gcc.gnu.org/">`http://gcc.gnu.org/`</A>} | Linux / MacOS X |
|          | \sc{MS} Windows 95/98/2000/XP/NT4 | 
| \sc{Intel} `C++` 15.0\cgalFootnote{<A HREF="http://software.intel.com/en-us/intel-compilers/">`http://software.intel.com/en-us/intel-compilers/`</A>} | Linux  |
|\sc{MS} Visual `C++` 10.0, 11.0, 12.0, 14.0 (\sc{Visual Studio} 2010, 2012, 2013, and 2015)\cgalFootnote{<A HREF="http://msdn.microsoft.com/en-us/vstudio/">`http://msdn.microsoft.com/en-us/vstudio/`</A>} | \sc{MS} Windows 95/98/2000/XP/NT4/Vista/7/8 |
| `Clang` \cgalFootnote{<A HREF="http://clang.llvm.org/">`http://clang.llvm.org/`</A>} compiler version 3.5 and 3.6.2 | Linux / MacOS X |
| Apple `Clang` compiler version 6.0 and 4.2 | MacOS X |


\section secconfigwithcmake Configuring CGAL with CMake 

In order to configure, build, and install the \cgal libraries, examples and
demos, you need CMake, a cross-platform "makefile generator".
If CMake is not installed already you can obtain it from <A HREF="http://www.cmake.org/">`http://www.cmake.org/`</A>.
CMake version 3.1 or higher is required.
This manual explains only those features of
CMake which are needed in order to build \cgal. Please refer to the 
CMake documentation at <A HREF="http://www.cmake.org/">`http://www.cmake.org/`</A> for further details.

Before building \cgal you have to choose the compiler/linker, 
set compiler and linker flags, specify which
third-party libraries you want to use and where they can be found, and 
which \cgal libraries you want to build. Gathering
all this information is called <I>configuration</I>. 
The end of the process is marked by the generation of a makefile or a
Visual \cpp solution and project file that you can use to build \cgal.

\subsection installation_configuring_gui Configuring CGAL with the CMake GUI

The simplest way to start the configuration is to run the graphical
user interface of CMake. We recommend to use `cmake-gui`. You must pass as 
argument the root directory of \cgal. For example:

<PRE>
cd CGAL-\cgalReleaseNumber
cmake-gui . # Notice the dot to indicate the current directory.
</PRE>

After `cmake-gui` opens, press 'Configure'. 
A dialog will pop up and you will have to choose what shall gets generated.
After you have made your choice and pressed 'Finish', you will see
the output of configuration tests in the lower portion of the application. 
When these tests are done, you will see many
red entries in the upper portion of the application. Just ignore them and press 'Configure'. 
By now CMake should have found many libraries and have initialized variables. 
If you still find red entries, you have to provide the necessary information. 
This typically happens if you have installed software at non-standard locations.
Providing information and pressing 'Configure' goes on until 
all entries are grayed. You are now ready to press 'Generate'. Once this is
done, you can quit `cmake-gui`.

\subsection installation_configuring_cmd Configuring CGAL with the cmake Command-Line Tool

Alternatively, you can run the command-line tool called
`cmake`. You pass as argument the root directory of
\cgal. For example:

<PRE>
cd CGAL-\cgalReleaseNumber
cmake . # Notice the dot to indicate the current directory.
</PRE>

The very first thing CMake does is to detect the compiler to use. This
detection is performed by a special CMake module called a
<I>generator</I>. 
A CMake generator understands the build requirements for a
particular compiler/linker and generates the necessary files for that. For
example, the <I>UNIX Makefiles</I> generator understands the GNU chain
of tools (\gcc, ld etc.) and produces makefiles, which can be used to build a
target by a simple call to `make`. Likewise, the <I>Visual Studio
2010</I> generator produces solution and project files and can be manually
launched in the VS IDE to build the target.

Each platform has a default generator, so you only need to select one when
the default is not what you want. For example, under Windows, it is
possible to generate <I>NMakefiles</I> instead of Visual Studio project
files in order to build the library with `nmake`. Running
`cmake` with no parameters in a command-line prints the list of
available generators supported by your platform and CMake version. If the
generator you need is not listed there, you can try a newer 
CMake version, as generators are hardcoded into CMake, and additional
generators are added with each release.

Since the choice of the generator determines the type of build files to generate, in some cases
you choose a particular generator as a mean to choose a specific compiler (because they use different 
build files). For example, the following generates solution files for
use in Visual \cpp 11.0 on a 64bit machine:

<PRE>
cd CGAL-\cgalReleaseNumber
cmake -G"Visual Studio 11 Win64" . 
</PRE>

In other cases, however, the generator doesn't directly identify a
specific compiler but a chain of tools.
For example, the `UNIX Makefiles` generator produces `makefiles` that call some auto-detected
command-line compiler, like \gcc. If you need the makefiles to use a different compiler, you need to
specify the desired compiler in the call to CMake, as in this example:

<PRE>
cd CGAL-\cgalReleaseNumber
cmake -DCMAKE_CXX_COMPILER:FILEPATH=g++-4.7 . 
</PRE>

CMake maintains configuration parameters in so-called <I>cmake variables</I>, like the `CMAKE_CXX_COMPILER`
in the example above. These variables <I>are not environment variables</I> but <I>CMake variables</I>. Some of the CMake 
variables represent user choices, such as `WITH_examples` or `CMAKE_BUILD_TYPE=Release`, while others
indicate the details of a third-party library, such as `Boost_INCLUDE_DIR` or the compiler flags to use,
such as `CMAKE_CXX_FLAGS`.

The command line tool `cmake` accepts CMake variables as arguments of the form `-D<VAR>:<TYPE>=<VALUE>`, as
in the example above, but this is only useful if you already know which variables need to be explicitly defined.

\cgalAdvancedBegin
CMake keeps the variables that a user can manipulate in a
so-called <I>CMake cache</I>, a simple text file named
`CMakeCache.txt`, whose entries are of the form
`VARIABLE:TYPE=VALUE`. Advanced users can manually edit this file,
instead of going through the interactive configuration session.
\cgalAdvancedEnd

The configuration process not only determines the location of the required dependencies, it also dynamically generates a
`compiler_config.h` file, which encodes the properties of your system and a special file named 
`CGALConfig.cmake`, which is used to build programs using \cgal. The
purpose of this file is explained below.

\section seclibraries CGAL Libraries 

\cgal is split into five libraries. During configuration, you can select the libraries that 
you would like to build by setting a CMake variable of the form <TT>WITH_<library></TT>. By default all 
are switched `ON`. All activated libraries are build after
configuration; see \ref secbuilding

We next list the libraries and essential 3rd party software
(see \ref secessential3rdpartysoftware) for each library:

| Library   | CMake Variable | Functionality | Dependencies |
| :-------- | :------------- | :------------ | :----------- |
| `%CGAL`   | none           | Main library  | \sc{Gmp}, \sc{Mpfr}, \sc{Boost} (headers), Boost.Thread and Boost.System (library) for compilers not supporting the keywords `thread_local` and the class `std::mutex` |
| `CGAL_Core` | `WITH_CGAL_Core`  | The CORE library for algebraic numbers.\cgalFootnote{CGAL_Core is not part of \cgal, but a custom version of the \sc{Core} library distributed by \cgal for the user convenience and it has it's own license.}  | \sc{Gmp} and \sc{Mpfr} |
| `CGAL_ImageIO` | `WITH_CGAL_ImageIO` | Utilities to read and write image files  | \sc{OpenGL}, \sc{zlib}, \sc{Vtk}(optional) |
| `CGAL_Qt5`  | `WITH_CGAL_Qt5` | `QGraphicsView` support for \sc{Qt}5-based demos | \sc{Qt}5 and \sc{OpenGL} |

\subsection installation_debug Debug vs. Release

The CMake variable `CMAKE_BUILD_TYPE` indicates how to build
the libraries. It accepts the values `Release` or
`Debug`. The default is `Release` and should be kept, unless you want to debug
your program.

This is not an issue for solution/project files, as there the user selects the build type from within the IDE.

\subsection installation_static Static vs. Shared Libraries

Shared libraries, also called <I>dynamic-link libraries</I>, are built by default
(`.dll` on Windows, `.so` on Linux, `.dylib` on MacOS). You
can choose to produce static libraries instead by setting the CMake
variable `BUILD_SHARED_LIBS` to `FALSE`. If you use
`cmake-gui`, a tick box for that variable is available to set it.

\subsection subsection_headeronly Header-only Option

\subsubsection subsection_headeronly_withconfiguration Header-only with CMake Configuration

Since \cgal 4.9, \cgal can be used in header-only mode, i.e. without compiling the \cgal libraries and linking with these libraries when compiling examples, tests and demos. This possibility can be enabled by setting the value of the CMake variable `CGAL_HEADER_ONLY` to `ON`. CMake version 3.0.0 or higher is required to use this option.

One advantage of using \cgal in header-only mode is that you do not need to compile and install \cgal libraries before compiling a given example or demo. Note that even in header-only mode we still need to run CMake on \cgal in order to generate different configuration files. So, setting up \cgal becomes now:

<PRE>
cd CGAL-\cgalReleaseNumber # go to \cgal directory
cmake -DCGAL_HEADER_ONLY=ON . # configure \cgal
</PRE>

and we do not need to run `make` anymore.

\subsubsection subsection_headeronly_without_configuration Header-only without CMake Configuration

Since \cgal 4.12, \cgal can be used in header-only mode, without even
configuring \cgal\. Programs using \cgal (examples, tests, demos, etc.)
must be directly configured using CMake. In this case, \cgal will be
configured at the same time. The variable `CGAL_DIR` must point to the root
directory of the \cgal source code (either the root of the unpacked release
tarball, or the root of the Git working directory).

So, using \cgal becomes now:

<PRE>
cd /path/to/your/code # go to the directory of the code source using \cgal
cmake -DCGAL_DIR=<CGAL-root> .
</PRE>

\subsubsection subsection_headeronly_dependencies CGAL Dependencies

\cgal can be used as a header-only library, though not all its dependencies
are header-only. The libraries \sc{Gmp} and \sc{Mpfr}, for example, are not
header-only.

\subsubsection subsection_headeronly_pbonwindows Possible Problem on Windows

There is one possible problem when using \cgal in header-only mode on a Windows operating system when compiling a program using several modules (executable programs or dynamic-link libraries DLL). If two different modules use the same static variable, this variable is defined independently in each of these modules. If one module modifies the value of this variable, it will not be modified in the other module, which could induce an unexpected behavior. In \cgal, this concerns only a few specific variables: the <A HREF="https://doc.cgal.org/latest/Generator/classCGAL_1_1Random.html">default random</A>, the <A HREF="https://doc.cgal.org/latest/STL_Extension/group__PkgStlExtensionAssertions.html">failure behavior</A>, <A HREF="https://doc.cgal.org/latest/Stream_support/group__PkgIOstreams.html">IO mode</A>. One example is the following: if you change the default random in one DLL, then if you use the default random in another DLL, you will not obtain the modified default random but the original one.

\section secessential3rdpartysoftware Essential Third Party Libraries 

The focus of \cgal is on geometry, and we rely on other
highly specialized libraries and software for non-geometric issues,
for instance, for numeric solvers, or visualization. We first list software
that is essential to build (all) libraries of \cgal, that is, 
this software must be found during the configuration of \cgal for an
actived library of \cgal (i.e.\ <TT>WITH_<library>=ON</TT>);
see \ref sec3partysoftwareconfig to specify the location of 3rd
party software.

The libraries \stl (shipped with any compiler) and \sc{Boost} are essential to all components (i.e.\ libCGAL,
libCGAL_Core, libCGAL_ImageIO, and libCGAL_Qt5).

\subsection thirdpartystl Standard Template Library (STL) 

\cgal heavily uses the \stl, and in particular adopted
many of its design ideas. You can find online
documentation for the \stl at various web sites, for instance, 
<A HREF="http://www.sgi.com/tech/stl/">`http://www.sgi.com/tech/stl/`</A>, <A HREF="http://www.cplusplus.com/reference/">`http://www.cplusplus.com/reference/`</A>,
or <A HREF="http://msdn.microsoft.com/en-us/library/1fe2x6kt(VS.100).aspx">`http://msdn.microsoft.com/en-us/library/1fe2x6kt(VS.100).aspx`</A>.

The \stl comes with the compiler, so there is nothing to install.

\subsection thirdpartyBoost Boost 

The \sc{Boost} libraries are a set of portable C++ source libraries. Most of
\sc{Boost} libraries are header-only, but a few of them need to be compiled or
installed as binaries.

\cgal requires the \sc{Boost} libraries. In particular the header files
and the threading library (`Boost.Thread` and
`Boost.System` binaries). Version 1.48 (or higher) are needed
for compilers not supporting the keyword `thread_local` and the class `std::mutex` (This is supported for \gcc 4.8 and later when using the \cpp 11 standard, and for Visual C++ starting with 2015, that is VC14).

As an exception, because of a bug in the \gcc compiler about the \cpp 11
keyword `thread_local`, the `CGAL_Core` library always requires
`Boost.Thread` if the \gcc compiler is used.

On Windows, as auto-linking is used, you also need the binaries of
`Boost.Serialization` and `Boost.DateTime`, but the
dependency is artificial and used only at link-time: the \cgal libraries do
not depend on the DLL's of those two libraries.

In \cgal some demos and examples depend on `Boost.Program_options`.

In case the \sc{Boost} libraries are not installed on your system already, you
can obtain them from <A HREF="http://www.boost.org/">`http://www.boost.org/`</A>. For Visual C++ you can download precompiled libraries
from <A HREF="http://sourceforge.net/projects/boost/files/boost-binaries/">`http://sourceforge.net/projects/boost/files/boost-binaries/`</A>.
For Visual C++ versions prior to 2015  `Boost.Thread` is required, so make sure to either install the precompiled 
libraries for your compiler or build `libboost-thread` and `libboost-system`.

As on Windows there is no canonical directory for where to find
\sc{Boost}, we recommend that you define the environment variable
`BOOST_ROOT` and set it to where you have installed \sc{Boost}, e.g.,
<A HREF="C:\boost\boost_1_41_0">`C:\boost\boost_1_41_0`</A>.

\subsection thirdpartyMPFR GMP and MPFR

The components libCGAL, libCGAL_Core, and libCGAL_Qt5 require 
\sc{Gmp} and \sc{Mpfr} which are libraries for multi precision integers and rational numbers,
and for multi precision floating point numbers.

\cgal combines floating point arithmetic with exact arithmetic,
in order to be efficient and reliable. \cgal has a built-in 
number type for that, but \sc{Gmp} and \sc{Mpfr} provide a faster
solution, and we recommend to use them.

Having \sc{Gmp} version 4.2 or higher and \sc{Mpfr} version 2.2.1 or higher
installed is recommended. These libraries can be obtained from
<A HREF="http://gmplib.org/">`http://gmplib.org/`</A> and <A HREF="http://www.mpfr.org/">`http://www.mpfr.org/`</A>, respectively.

As Visual \cpp is not properly
supported by the \sc{Gmp} and \sc{Mpfr} projects, we provide precompiled versions
of \sc{Gmp} and \sc{Mpfr}, which can be downloaded with the installer
`CGAL-\cgalReleaseNumber``-Setup.exe`.

\subsection thirdpartyzlib zlib 

\sc{zlib} is a data compression library, and is essential for the component libCGAL_ImageIO.

In \cgal this library is used in the examples of the \ref PkgSurfaceMesher3 package.

If it is not already on your system,
for instance, on Windows, you can download it from <A HREF="http://www.zlib.net/">`http://www.zlib.net/`</A>.

\subsection thirdpartyOpenGL OpenGL 

\sc{OpenGL} (Open Graphics Library) provides an API for applications that
produce 2D and 3D computer graphics.

In \cgal the library is essential for the component
libCGAL_Qt5, as well as libCGAL_ImageIO and for various demos.

Typically, \sc{OpenGL} is preinstalled on systems; if not, it can be
downloaded from <A HREF="http://www.opengl.org/">`http://www.opengl.org/`</A>.

\subsection thirdpartyQt Qt5

Qt is a cross-platform application and UI framework.

The component libCGAL_Qt5 requires \sc{Qt}5 installed on your system. 
In case \sc{Qt} is not yet installed on your system, you can download 
it from <A HREF="http://qt-project.org/">`http://qt-project.org/`</A>.


The exhaustive list of \sc{Qt}5 components used in demos is:
`Core`, `Gui`, `Help`, `OpenGL`, `Script`, `ScriptTools`, `Svg`, `Widgets`,
`qcollectiongenerator` (with `sqlite` driver plugin) and `Xml`.

Having \sc{Qt}5 version 5.3.0 is recommended.

\section installation_examples CGAL Examples and Demos

\cgal is distributed with a large collection of examples and demos. By default, these are <B>not</B> configured along with
the \cgal libraries, unless you set the variables `WITH_examples=ON` and/or `WITH_demos=ON`.

Nevertheless, even when configured with \cgal, they are not automatically built along with the libraries.
You must build the `examples` or `demos` targets (or IDE projects) explicitly.

If you do not plan to compile any demos, you might skip some of the essential libraries (as \sc{Qt} or
\sc{OpenGL}), as the corresponding \cgal-libraries are not linked. But for
your own demos you might need these \cgal-libraries.

\section secoptional3rdpartysoftware Optional Third Party Libraries 

Optional 3rd party software can be used by \cgal for various reasons:
Usually certain optional libraries are required to build examples and
demos shipped with \cgal or to build your own project using \cgal. 
Another reason is to speed up basic tasks. 
In order to support these goals, all optional libraries can be <i>prepared to be
used with \cgal</I> while configuring \cgal, just in the same way as
essential libraries are configured. Whenever building an example or a
demo (or your own executable), these <I>preconfigured</I> libraries
are available when using \cgal.

\subsection thirdpartyLeda LEDA

\leda is a library of efficient data structures and
algorithms. Like \sc{Core}, \leda offers a real number data type.

In \cgal this library is optional, and its number types can 
be used as an alternative to \sc{Gmp}, \sc{Mpfr}, and \sc{Core}.

Free and commercial editions of \leda are available from <A HREF="http://www.algorithmic-solutions.com/leda/index.html">`http://www.algorithmic-solutions.com/leda/index.html`</A>.

\subsection thirdpartyMPFI MPFI

\sc{Mpfi} provides arbitrary precision interval arithmetic with intervals
represented using \sc{Mpfr} reliable floating-point numbers. 
It is based on the libraries \sc{Gmp} and \sc{Mpfr}.
In the setting of \cgal, this library is
optional: it is used by some models of the
\ref PkgAlgebraicKerneld "Algebraic Kernel".

\sc{Mpfi} can be downloaded from <A HREF="http://mpfi.gforge.inria.fr/">`http://mpfi.gforge.inria.fr/`</A>. Version 1.4 or higher is recommended.

\subsection thirdpartyRS3 RS and RS3

\sc{Rs} (Real Solutions) is devoted to the study of the real roots of
polynomial systems with a finite number of complex roots (including
univariate polynomials). In \cgal, \sc{Rs} is used by one model of the
\ref PkgAlgebraicKerneld "Algebraic Kernel".

\sc{Rs} is freely distributable for non-commercial use. You can download it
from <a href="http://vegas.loria.fr/rs/">`http://vegas.loria.fr/rs/`</a>. Actually, the \sc{Rs} package also includes \sc{Rs3}, the
successor of \sc{Rs}, which is used in conjunction with it.

The libraries \sc{Rs} and \sc{Rs3} need \sc{Mpfi}, which can be downloaded from
<A HREF="http://mpfi.gforge.inria.fr/">`http://mpfi.gforge.inria.fr/`</A>.

\subsection thirdpartyNTL NTL

\sc{Ntl} provides data structures and algorithms for signed, arbitrary
length integers, and for vectors, matrices, and polynomials over the 
integers and over finite fields. The optional library \sc{Ntl} is used by \cgal 
to speed up operations of the Polynomial package, such as GCDs. It is recommended to install \sc{Ntl} with support from \sc{Gmp}.

\sc{Ntl} can be downloaded from <A HREF="http://www.shoup.net/ntl/">`http://www.shoup.net/ntl/`</A>. Version 5.1 or higher is recommended.

\subsection thirdpartyEigen Eigen 

\sc{Eigen} is a `C++` template library for linear algebra. \sc{Eigen} supports all
matrix sizes, various matrix decomposition methods and sparse linear solvers.

In \cgal, \sc{Eigen} provides sparse linear solvers in the \ref PkgPoissonSurfaceReconstruction
and the \ref PkgSurfaceParameterization packages. 

In addition, \sc{Eigen} also provides singular value decomposition for the \ref PkgJet_fitting_3
and the \ref PkgRidges_3 packages.

The \sc{Eigen} web site is <A HREF="http://eigen.tuxfamily.org">`http://eigen.tuxfamily.org`</A>.

\subsection thirdpartylibQGLViewer libQGLViewer 

libQGLViewer is a 3D widget based on \sc{Qt} 4's `QGLWidget`. In case of \sc{Qt}5 used, libQGLViewer needs to be recompiled with the proper \sc{Qt}5 version.

In \cgal some 3D demos are based on libQGLViewer.

It can be downloaded from <A HREF="http://www.libqglviewer.com/">`http://www.libqglviewer.com/`</A>.

\subsection thirdpartyESBTL ESBTL

The \sc{Esbtl} (Easy Structural Biology Template Library) is a library that allows
the handling of \sc{Pdb} data.

In \cgal the \sc{Esbtl} is used in an example of the
\ref PkgSkinSurface3 package.

It can be downloaded from <A HREF="http://esbtl.sourceforge.net/">`http://esbtl.sourceforge.net/`</A>.

\subsection thirdpartyTBB Intel TBB

\sc{Tbb} (Threading Building Blocks) is a library developed by Intel Corporation for writing software 
programs that take advantage of multi-core processors.

In \cgal, \sc{Tbb} is used by the packages that offer parallel code.

The \sc{Tbb} web site is <A HREF="http://www.threadingbuildingblocks.org">`http://www.threadingbuildingblocks.org`</A>.

\subsection thirdpartyLASlib LASlib

\sc{LASlib} is a `C++` library for handling LIDAR data sets stored in
the LAS format (or the compressed LAZ format).

In \cgal, \sc{LASlib} is used to provide input and output functions in
the \ref PkgPointSetProcessing package.

The \sc{LASlib} web site is <a
href="https://rapidlasso.com/lastools/">`https://rapidlasso.com/lastools/`</a>. \sc{LASlib}
is usually distributed along with LAStools: for simplicity, \cgal
provides <a href="https://github.com/CGAL/LAStools">a fork with a
CMake based install procedure</a>.

\subsection thirdpartyOpenCV OpenCV

\sc{OpenCV} (Open Computer Vision) is a library designed for computer
vision, computer graphics and machine learning.

In \cgal, \sc{OpenCV} is used by the \ref PkgClassification package.

The \sc{OpenCV} web site is <A HREF="http://opencv.org/">`http://opencv.org/`</A>.


\section secbuilding Building CGAL 

The results of a successful configuration are build files that control the build step.
The nature of the build files depends on the generator used during configuration, but in all cases they 
contain several <I>targets</I>, one per library, and a default global target corresponding 
to all the libraries.

For example, in a \sc{Unix}-like environment the default generator produces
makefiles. You can use the `make` command-line tool for the
succeeding build step as follows:

<PRE>

cd CGAL-\cgalReleaseNumber

# build all the selected libraries at once

make 

</PRE>

The resulting libraries are placed in the subdirectory `lib` under `<CMAKE_BINARY_DIR>`
(which is `CGAL-\cgalReleaseNumber` in case you run an in-source-configuration).

With generators other than `UNIX Makefiles` the resulting build files
are solution and project files which
should be launched in an \sc{Ide}, such as Visual Studio or KDevelop3. They will contain the targets described
above, which you can manually build as with any other solution/project within your \sc{Ide}.

Alternatively, you can build it with the command line version of the
\sc{Visual Studio Ide}:

<PRE>

devenv CGAL.sln /Build Debug

</PRE>

The "Debug" argument is needed because CMake creates solution files for
all four configurations, and you need to explicitly choose one when building
(the other choices are Release, RelWithDebInfo and MinSizeRel).

\cgalAdvancedBegin
The build files produced by CMake are autoconfigured. That
is, if you change any of the dependencies, the build step
automatically goes all the way back to the configuration step. This
way, once the target has been configured the very first time by
invoking cmake, you don't necessarily need to invoke `cmake`
again. Rebuilding will call itself `cmake` and re-generate the
build file whenever needed. Keep this in mind if you configure \cgal
for the Visual Studio IDE since a build could then change the
solution/project file in-place and VS will prompt you to reload it.
\cgalAdvancedEnd

If you have turned on the configuration of examples
(`-DWITH_examples=ON`) and/or demos (`-DWITH_demos=ON`), there will be additional
targets named `examples` and `demos`, plus one target for
each example and each demo in the build files.
None of these targets are included by default, so you need to build them explicitly
<I>after</I> the \cgal libraries have been successfully built.
The targets `examples` and `demos` include themselves all the targets
for examples and demos respectively.

<PRE>

# build all examples at once
make examples 

# build all demos at once
make demos

# build only the Straight Skeleton demo
make Straight_skeleton_2_demo

</PRE>

\cgalAdvancedBegin
When using `UNIX Makefiles` you can find out the
exact name of the example or demo target of a particular package by
typing `make help | grep <package>`.
\cgalAdvancedEnd

\section secinstalling Installing CGAL 

On many platforms, library pieces such as headers, docs and binaries
are expected to be placed in specific locations. A typical example
being <A HREF="/usr/include">`/usr/include`</A> and <A HREF="/usr/lib">`/usr/lib`</A> on \sc{Unix}-like
operating systems or <A HREF="C:/Program Files/">`C:/Program Files/`</A> on Windows. The process
of placing or copying the library elements into its standard location
is sometimes referred to as <I>Installation</I> and it is a
postprocessing step after the build step.

CMake carries out the installation by producing a build target named <I>install</I>. 
The following example shows a typical session from configuration to
installation in a \sc{Unix}-like environment:

<PRE>

cd CGAL-\cgalReleaseNumber

cmake . # configure
make # compile
make install # install

</PRE>

If you use a generator that produces IDE files (for Visual Studio for instance) there will be an optional
`INSTALL` project, which you will be able to <I>"build"</I> to execute the installation step.

\cgalAdvancedBegin
The files are copied into a directory tree relative to the <I>installation directory</I> determined by the 
CMake variable `CMAKE_INSTALL_PREFIX`. This variable defaults to `/usr/local` under \sc{Unix}-like operating systems
and <A HREF="C:\ProgramFiles">`C:\Program Files`</A> under Windows. If you want to install to a different location, you must override that CMake
variable explicitly <I>at the configuration time</I> and not when executing the install step.
\cgalAdvancedEnd

The file `CGALConfig.cmake` is installed by default in
`$CMAKE_INSTALLED_PREFIX/lib/``CGAL-\cgalReleaseNumber`.

\section seccmakeoutofsource Multiple Variants of Makefiles (out-of-source build)


While you can choose between release or debug builds, and shared or static libraries,
it is not possible to generate different variants during a single configuration. You need to run CMake in a 
different directory for each variant you are interested in, each with its own selection of configuration parameters.

CMake stores the resulting makefiles and project files, along with several temporary and auxiliary files such
as the variables cache, in the directory where it is executed, called `CMAKE_BINARY_DIR`, but it
takes the source files and configuration scripts from
`CMAKE_SOURCE_DIR`.

The binary and source directories do not need to be the same. Thus, you can configure multiple variants by creating a
distinct directory for each configuration and by running CMake from there. This is known in CMake terminology
as <I>out-of-source configuration</I>, as opposite to an <I>in-source
configuration</I>, as showed in the previous sections.

You can, for example, generate subdirectories `CGAL-\cgalReleaseNumber``/cmake/platforms/debug` and 
`CGAL-\cgalReleaseNumber``/cmake/platforms/release` for two configurations, respectively:

<PRE>
mkdir CGAL-\cgalReleaseNumber/cmake/platforms/debug
cd CGAL-\cgalReleaseNumber/cmake/platforms/debug
cmake -DCMAKE_BUILD_TYPE=Debug ../../..

mkdir CGAL-\cgalReleaseNumber/cmake/platforms/release
cd CGAL-\cgalReleaseNumber/cmake/platforms/release
cmake -DCMAKE_BUILD_TYPE=Release ../../..
</PRE>

\section installation_configuring_using Configuring and Building Programs Using CGAL

Ideally, configuring and compiling a demo/example/program amounts to

<PRE>

cd CGAL-\cgalReleaseNumber/examples/Straight_skeleton_2
cmake -DCGAL_DIR=$HOME/CGAL-\cgalReleaseNumber .
make

</PRE>

In this ideal world, as for all shipped examples and demos of \cgal, the
required `CMakeLists.txt` is already provided.

CMake can also be used to configure and build user programs via such
CMake-scripts. In this less ideal world, one has to provide the
`CMakeLists.txt` script either manually, or with the help of a
shell-script that is introduced below.

For a user program `executable.cpp`, the ideal world looks like this:

<PRE>
cd /path/to/program 
cgal_create_CMakeLists -s executable
cmake -DCGAL_DIR=$HOME/CGAL-\cgalReleaseNumber . 
make
</PRE>

In both examples we specify the `CGAL_DIR`:
During configuration of the \cgal libraries a file named `CGALConfig.cmake` is generated in \cgal's root directory (in contrast
to \cgal's source directory that has been used for installation). This file
contains the definitions of several CMake variable that summarize the
configuration of \cgal. In order to configure a program, you need
to indicate the location of that config file in the CMake variable
`CGAL_DIR` (as indicated in the example above). 
`CGAL_DIR` can also be an environment variable. Setting
`CGAL_DIR` makes particular sense if having multiple
out-of-source builds of \cgal as in Section \ref seccmakeoutofsource.

If you have installed \cgal, `CGAL_DIR` must afterwards be set to
`$CMAKE_INSTALLED_PREFIX/lib/CGAL`. Note that \cgal is
recommended to be installed in release mode when using it to build programs.

\subsection installation_creating Creating a CMake Script for a Program Using CGAL

For compiling a non-shipped program, it is
recommended, to also rely on a CMake-supported configuration using a
`CMakeLists.txt` used for configuration.

Use the following Bourne-shell script for programs that are relatively
simple to configure:

\subsection seccreate_cgal_CMakeLists cgal_create_CMakeLists

The Bourne-shell script `cgal_create_CMakeLists.txt` resides in the
`CGAL-\cgalReleaseNumber``/scripts` directory. It can be used to create
`CMakeLists.txt` files for compiling \cgal applications. Executing
`cgal_create_CMakeLists.txt` in an application directory creates a
`CMakeLists.txt` containing rules to build the contained
application(s). Three command line options determine details of the
configuration.

<DL>
<DT><B>`-s source`</B><DD> If this parameter is given the script will
create <B>a single executable</B> for 'source' linked with
compilations of all other source files
(`*.cc`, `*.cp`, `*.cxx`, `*.cpp`, `*.CPP`, `*.c++`, or `*.C`).
This behaviour is usually needed for (graphical) demos. 

If the parameter is not given, the script creates <B>one executable for each given
source file</B>.
<DT><B>`-c com1:com2:...`</B><DD> Lists components ("com1",
"com2") of \cgal to which the executable(s) should be linked. Valid components are \cgal's
libraries (i.e.\ "Core", "ImageIO", and "Qt5") and all
preconfigured 3rd party software, such as "MPFI", "RS3"). An example is `-c Core:GMP:RS3:MPFI`

<DT><B>`-b boost1:boost2:...`</B><DD> Lists components ("boost1",
"boost2") of \sc{Boost} to which the executable(s) should be
linked. Valid options are, for instance, "filesystem" or "program_options".

</DL>

This options should suffice to create `CMakeLists.txt` script
for most directories containing programs. However, in some special
cases, it might still be required to create the script manually, for
instance, if some source files/executables need a different linking than
other source files.

\subsection seccreate_cgal_cmake_script cgal_create_cmake_script

\deprecated For backward-compatibility we still provide the
Bourne-shell script `cgal_create_cmake_script` that is
contained in the `CGAL-\cgalReleaseNumber``/scripts` directory. It can be used
to create `CMakeLists.txt` files for compiling \cgal
applications. Executing `cgal_create_cmake_script` in an
application directory creates a `CMakeLists.txt` containing
rules for every C++ source file there. The script is deprecated,
as it only works for applications with a single course file that only
need libCGAL and libCGAL_Core.

Such a shell-script simply creates a CMake script. Processing it
with CMake, searches for \cgal using `find_package`. If found,
the variable `CGAL_USE_FILE` is set to a compilation environment CMake file. Including
this file within a CMake script sets up include paths and libraries to
link with \cgal and essential third party libraries. Beyond,
`find_package` can demand for `COMPONENTS` of \cgal,
that is, all \cgal libraries `libCGAL_Core` (<i>Core</i>),
libCGAL_ImageIO (<i>ImageIO</i>), and libCGAL_Qt5
(<i>Qt5</i>) or optional 3rd party software such as <i>MPFI</i>, <i>RS3</i>.
A user is free to create the `CMakeLists.txt`
without calling the script (manual creation).

\subsection installation_custom Custom Flags in the Programs Using CGAL

Normally, programs linked with \cgal must be compiled with the same flags
used by the compilation of \cgal libraries. For this reason, the <I>very first</I> time
a program is configured, all the flags given by the CMake variables `CMAKE_*_FLAGS`
are <I>locked</I> in the sense that the values recorded in `CGALConfig.cmake` 
are used to override any values given by CMake itself or yourself.

This does not apply to the additional flags that can be given via `CGAL_*_FLAGS`.

Such <I>inherited</I> values are then recorded in the current CMake cache for the program.
The flags are then <I>unlocked</I> in the sense that at any subsequent configuration you can
provide your own flags and this time they will not be overridden.

When using the interactive `cmake-gui` the first press on `Configure` unlocks
the flags, so that you can edit them as needed.

\cgalAdvancedBegin
The locking of flags is controlled by the variable
`CGAL_DONT_OVERRIDE_CMAKE_FLAGS` which starts out FALSE and is
toggled right after the flags have been loaded from
`CGALConfig.cmake`.

If you use the command line tool you can specify flags <I>directly</I> by setting the
controlling variable right up front:

<PRE>
cd CGAL-\cgalReleaseNumber
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-g .
cd CGAL-\cgalReleaseNumber/examples/Straight_skeleton_2
cmake -DCGAL_DIR=CGAL-\cgalReleaseNumber -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=-O2 -DCGAL_DONT_OVERRIDE_CMAKE_FLAGS=TRUE . 
</PRE>
\cgalAdvancedEnd

\section installation_summary Summary of CGAL's Configuration Variables

Most configuration variables are not environment variables but
<I>CMake variables</I>. They are given in the command line to CMake
via the `-D` option, or passed from the interactive interface
of `cmake-gui`. Unless indicated differently, all the variables
summarized below are CMake variables.

\subsection installation_component_selection Component Selection

The following boolean variables indicate which \cgal components to
configure and build. Their values can be ON or OFF.


| Variable | %Default Value   |
| :------- | :--------------- |
| `WITH_examples`     | OFF   |
| `WITH_demos`        | OFF   |
| `WITH_CGAL_Core`    | ON    |
| `WITH_CGAL_Qt5`     | ON    |
| `WITH_CGAL_ImageIO` | ON    |

\subsection installation_flags Compiler and Linker Flags

The following variables specify compiler and linker flags. Each variable holds a 
space-separated list of command-line switches for the compiler and linker and 
their default values are automatically defined by CMake based on the target platform.

Have in mind that these variables specify a list of flags, not just one
single flag. If you provide your own definition for a variable, you will <I>entirely</I> override
the list of flags chosen by CMake for that particular variable.

The variables that correspond to both debug and release builds are always
used in conjunction with those for the specific build type.


| Program               | Both Debug and Release      |  Release Only                        |  Debug Only  |
| :------               | :----------------------     | :-------------                       | :----------- |
| C++ Compiler          | `CMAKE_CXX_FLAGS`           | `CMAKE_CXX_FLAGS_RELEASE`            | `CMAKE_CXX_FLAGS_DEBUG` |
| Linker (shared libs)  | `CMAKE_SHARED_LINKER_FLAGS` | `CMAKE_SHARED_LINKER_FLAGS_RELEASE`  | `CMAKE_SHARED_LINKER_FLAGS_DEBUG` |
| Linker (static libs)  | `CMAKE_MODULE_LINKER_FLAGS` | `CMAKE_MODULE_LINKER_FLAGS_RELEASE`  | `CMAKE_MODULE_LINKER_FLAGS_DEBUG` |
| Linker (programs)     | `CMAKE_EXE_LINKER_FLAGS`    | `CMAKE_EXE_LINKER_FLAGS_RELEASE`     | `CMAKE_EXE_LINKER_FLAGS_DEBUG`|


\subsection installation_additional_flags Additional Compiler and Linker Flags

The following variables can be used to <I>add</I> flags without overriding the ones
defined by cmake.


| Program               | Both Debug and Release      |  Release Only                        |  Debug Only  |
| :------               | :----------------------     | :-------------                       | :----------- |
| C++ Compiler          | `CGAL_CXX_FLAGS`            | `CGAL_CXX_FLAGS_RELEASE`             | `CGAL_CXX_FLAGS_DEBUG` |
| Linker (shared libs)  | `CGAL_SHARED_LINKER_FLAGS`  | `CGAL_SHARED_LINKER_FLAGS_RELEASE`   | `CGAL_SHARED_LINKER_FLAGS_DEBUG` |
| Linker (static libs)  | `CGAL_MODULE_LINKER_FLAGS`  | `CGAL_MODULE_LINKER_FLAGS_RELEASE`   | `CGAL_MODULE_LINKER_FLAGS_DEBUG` |
| Linker (programs)     | `CGAL_EXE_LINKER_FLAGS`     | `CGAL_EXE_LINKER_FLAGS_RELEASE`      | `CGAL_EXE_LINKER_FLAGS_DEBUG` |

\subsection installation_misc Miscellaneous Variables


| Variable              | Description                                                           | Type        | %Default Value | 
| :-                    | :-                    | :-   |  :-            |
| `CMAKE_BUILD_TYPE`    | Indicates type of build. Possible values are 'Debug' or 'Release'     | CMake       | Release |
| `CMAKE_CXX_COMPILER`  | Full-path to the executable corresponding to the C++ compiler to use. | CMake       | platform-dependent |
| `CXX`                 | Idem                                                                  | Environment | Idem |


\subsection installation_variables_building Variables Used Only When Building Programs (Such as Demos or Examples)


| Variable              | Description                                                           | Type        | %Default Value | 
| :-                    | :-                    | :-   |  :-            |
| `CGAL_DIR`            | Full-path to the binary directory where \cgal was configured          |Either CMake or Environment | none |


\subsection installation_variables_third_party Variables Providing Information About 3rd-Party Libraries
\anchor sec3partysoftwareconfig

The following variables provide information about the availability and
location of the 3rd party libraries used by \cgal. CMake automatically
searches for dependencies so you need to specify these variables if 
CMake was unable to locate something. This is indicated by a value ending in
`NOTFOUND`.

Since 3rd-party libraries are system wide, many of the CMake variables listed below can alternatively
be given as similarly-named environment variables instead. Keep in mind that you must provide one or the
other but never both.

\subsection installation_boost Boost Libraries

In most cases, if \sc{Boost} is not automatically found, setting the `BOOST_ROOT` 
variable is enough. If it is not, you can specify the header and library
directories individually. You can also provide the full pathname to a specific compiled library
if it cannot be found in the library directory or its name is non-standard.

By default, when \sc{Boost} binary libraries are needed, the shared versions
are used if present. You can set the variable
`CGAL_Boost_USE_STATIC_LIBS` to `ON` if you want to link
with static versions explicitly.

On Windows, if you link with \sc{Boost} shared libraries, you must ensure that
the `.dll` files are found by the dynamic linker, at run time. 
For example, you can add the path to the \sc{Boost} `.dll` to the
`PATH` environment variable.

| Variable              | Description                                                           | Type        |
| :-                    | :-                    | :-             |
| `BOOST_ROOT`\cgalFootnote{The environment variable can be spelled either `BOOST_ROOT` or `BOOSTROOT`} | Root directory of your \sc{Boost} installation | Either CMake or Environment |
| `Boost_INCLUDE_DIR`   | Directory containing the `boost/version.hpp` file  | CMake |
| `BOOST_INCLUDEDIR`    | Idem | Environment |
| `Boost_LIBRARY_DIRS`  | Directory containing the compiled \sc{Boost} libraries  | CMake | 
| `BOOST_LIBRARYDIR`    | Idem | Environment |
| `Boost_(xyz)_LIBRARY_RELEASE`  | Full pathname to a release build of the compiled 'xyz' \sc{Boost} library | CMake | 
| `Boost_(xyz)_LIBRARY_DEBUG` | Full pathname to a debug build of the compiled 'xyz' \sc{Boost} library | CMake |


\subsection installation_gmp GMP and MPFR Libraries

Under Windows, auto-linking is used, so only the <I>directory</I> 
containing the libraries is needed and you would specify `GMP|MPFR_LIBRARY_DIR` rather than
`GMP|MPFR_LIBRARIES`. On the other hand, under Linux the actual library filename is needed.
Thus you would specify `GMP|MPFR_LIBRARIES`. In no case you need to specify both.

\cgal uses both \sc{Gmp} and \sc{Mpfr} so both need to be supported. If either of them is unavailable the 
usage of \sc{Gmp} and of \sc{Mpfr} will be disabled.


| Variable              | Description                                                           | Type        |
| :-                    | :-                    | :-             |
| `CGAL_DISABLE_GMP`    | Indicates whether to search and use \sc{Gmp}/\sc{Mpfr} or not  | CMake | 
| `GMP_DIR`  | Directory of \sc{Gmp} default installation  | Environment |
| `GMP_INCLUDE_DIR`  | Directory containing the `gmp.h` file  | CMake | 
| `GMP_INC_DIR` | Idem | Environment |
| `GMP_LIBRARIES_DIR`  | Directory containing the compiled \sc{Gmp} library | CMake |
| `GMP_LIB_DIR` | Idem | Environment |
| `GMP_LIBRARIES` | Full pathname of the compiled \sc{Gmp} library  | CMake |
| `MPFR_INCLUDE_DIR` | Directory containing the `mpfr.h` file | CMake |
| `MPFR_INC_DIR`  | Idem | Environment | 
| `MPFR_LIBRARIES_DIR` | Directory containing the compiled \sc{Mpfr} library | CMake |
| `MPFR_LIB_DIR` | Idem | Environment |
| `MPFR_LIBRARIES`  | Full pathname of the compiled \sc{Mpfr} library | CMake |



Under Linux, the \sc{Gmpxx} is also searched for, and you may specify the following variables:


| Variable              | Description                                                           | Type        |
| :-                    | :-                    | :-             |
| `GMPXX_DIR` | Directory of \sc{gmpxx} default installation | Environment |
| `GMPXX_INCLUDE_DIR`  | Directory containing the `gmpxx.h` file  | CMake |
| `GMPXX_LIBRARIES`  | Full pathname of the compiled \sc{Gmpxx} library  | CMake |



\subsection installation_qt5 Qt5 Library

You must set the cmake or environment variable `Qt5_DIR` to point to the path
to the directory containing the file `Qt5Config.cmake` created by your \sc{Qt}5 installation. If you are
using the open source edition it should be `<path>/qt-everywhere-opensource-src-<version>/qtbase/lib/cmake/Qt5`.

\subsection installation_leda LEDA Library

When the \leda libraries are not automatically found, yet they are installed on the system
with base names 'leda' and 'ledaD' (for the release and debug versions resp.), it might 
be sufficient to just indicate the library directory via the `LEDA_LIBRARY_DIRS` variable.
If that doesn't work because, for example, the names are different, you can provide the full pathnames of each variant
via `LEDA_LIBRARY_RELEASE` and `LEDA_LIBRARY_DEBUG`.

The variables specifying definitions and flags can be left undefined if they are not needed by LEDA.


| Variable               | Description           | Type        |
| :-                     | :-                    | :-             |
| `WITH_LEDA`            | Indicates whether to search and use \leda or not | CMake |
| `LEDA_DIR`             | Directory of \sc{LEDA} default installation | Environment |
| `LEDA_INCLUDE_DIR`     | Directory containing the file `LEDA/system/basic.h` | CMake |
| `LEDA_LIBRARIES`       | Directory containing the compiled \leda libraries | CMake |
| `LEDA_INC_DIR`         | Directory containing the file `LEDA/system/basic.h` | Environment |
| `LEDA_LIB_DIR`         | Directory containing the compiled \leda libraries  | Environment |
| `LEDA_LIBRARY_RELEASE` | Full pathname to a release build of the \leda library | CMake |
| `LEDA_LIBRARY_DEBUG`   | Full pathname to a debug build of the \leda library | CMake |
| `LEDA_DEFINITIONS`     | Preprocessor definitions | CMake |
| `LEDA_CXX_FLAGS`       | Compiler flags | CMake |
| `LEDA_LINKER_FLAGS`    | Linker flags | CMake |


\subsection installation_mpfi MPFI Library

\cgal provides a number type based on this library, but the \cgal library
itself does not depend on \sc{Mpfi}. This means that this library must be
configured when compiling an application that uses the above number type.

When \sc{Mpfi} files are not on the standard path, the locations of the headers
and library files must be specified by using environment variables.


| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `MPFI_DIR`           |Directory of \sc{MPFI} default installation | Environment |
| `MPFI_INCLUDE_DIR`   | Directory containing the `mpfi.h` file | CMake | 
| `MPFI_INC_DIR`       | Idem | Environment |
| `MPFI_LIBRARIES_DIR` | Directory containing the compiled \sc{Mpfi} library | CMake |
| `MPFI_LIB_DIR`       | Idem | Environment |
| `MPFI_LIBRARIES`     | Full pathname of the compiled \sc{Mpfi} library | CMake |



\subsection installation_rs RS and RS3 Library

As said before, only the \cgal univariate algebraic kernel depends on the
library Rs. As the algebraic kernel is not compiled as a part of the \cgal
library, this library is not detected nor configured at installation time.

CMake will try to find Rs in the standard header and library
directories. When it is not automatically detected, the locations of the
headers and library files must be specified using environment variables.

Rs needs \sc{Gmp} 4.2 or later and \sc{Mpfi} 1.3.4 or later. The variables
related to the latter library may also need to be defined.


| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `RS_DIR` | Directory of \sc{Rs} default installation | Environment |
| `RS_INCLUDE_DIR` | Directory containing the `rs_exports.h` file | CMake |
| `RS_INC_DIR` | Idem | Environment |
| `RS_LIBRARIES_DIR`  | Directory containing the compiled \sc{Rs} library | CMake |
| `RS_LIB_DIR` | Idem | Environment |
| `RS_LIBRARIES` | Full pathname of the compiled \sc{Rs} library | CMake |

Similar variables exist for \sc{Rs3}.

| Variable             | Description           | Type        |
| :-                   | :-                    | :-       
| `RS3_DIR` | Directory of \sc{Rs3} default installation | Environment |
| `RS3_INCLUDE_DIR` | Directory containing the file `rs3_fncts.h` file | CMake |
| `RS3_INC_DIR` | Idem | Environment |
| `RS3_LIBRARIES_DIR` | Directory containing the compiled \sc{Rs3} library | CMake |
| `RS3_LIB_DIR` | Idem | Environment |
| `RS3_LIBRARIES` | Full pathname of the compiled \sc{Rs3} library | CMake |


\subsection installation_ntl NTL Library

Some polynomial computations in \cgal's algebraic kernel 
are speed up when \sc{Ntl} is available. 
As the algebraic kernel is not compiled as a part of the \cgal
library, this library is not detected nor configured at installation time.

CMake will try to find \sc{Ntl} in the standard header and library
directories. When it is not automatically detected, the locations of the
headers and library files must be specified using environment variables.

| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `NTL_DIR` | Directory of \sc{NTL} default installation | Environment |
| `NTL_INCLUDE_DIR` | Directory containing the `NTL/ZZX.h` file | CMake |
| `NTL_INC_DIR` | Idem | Environment |
| `NTL_LIBRARIES_DIR` | Directory containing the compiled \sc{Ntl} library | CMake |
| `NTL_LIB_DIR` | Idem | Environment |
| `NTL_LIBRARIES` | Full pathname of the compiled \sc{Ntl} library | CMake |

\subsection installation_eigen Eigen Library

\sc{Eigen} is a header-only template library.
Only the <I>directory</I> containing the header files of \sc{Eigen} 3.1 (or greater) is needed.


| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `EIGEN3_INCLUDE_DIR` | Directory containing the file `signature_of_eigen3_matrix_library` | CMake |
| `EIGEN3_INC_DIR` | Idem | Environment |

\subsection installation_qgl QGLViewer Library

Some demos require the GLViewer library.

In most cases, if QGLViewer is not automatically found, setting the `QGLVIEWERROOT` 
environment variable is sufficient. If it is not, you can specify the directory containing 
the header files and the full pathnames of the release and debug libraries

| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `QGLVIEWERROOT` | Root directory of the QGLViewer library | Environment |
| `QGLVIEWER_INCLUDE_DIR` | Directory containing the `QGLViewer/qglviewer.h` file | CMake |
| `QGLVIEWER_LIBRARY_RELEASE` | Full pathname to a release build of the QGLViewer library | CMake |
| `QGLVIEWER_LIBRARY_DEBUG` | Full pathname to a debug build of the QGLViewer library | CMake |


\subsection installation_esbtl ESBTL Library

One skin surface example requires the \sc{Esbtl} library in order to read \sc{Pdb} files.

If \sc{Esbtl} is not automatically found, setting the `ESBTL_INC_DIR`
environment variable is sufficient.


| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `ESBTL_DIR` | Directory of \sc{ESBTL} default installation | Environment |
| `ESBTL_INC_DIR` | Directory containing the `ESBTL/default.h` file | Environment |
| `ESBTL_INCLUDE_DIR` | Directory containing the `ESBTL/default.h` file | CMake |

\subsection installation_tbb TBB Library

If \sc{Tbb} is not automatically found, the user must set the `TBBROOT`
environment variable. The environment variable `TBB_ARCH_PLATFORM=<arch>/<compiler>` must be set. 
`<arch>` is `ia32` or `intel64`. `<compiler>` describes the Linux kernel, gcc version or Visual Studio version
used. It should be set to what is used in `$TBBROOT/lib/<arch>`.

For windows users, the folder `TBBROOT/bin/<arch>/<compiler>` should be added to the `PATH` variable.

Note that the variables in the table below are being used.

| Variable             | Description           | Type        |
| :-                   | :-                    | :-             |
| `TBBROOT` | Directory of \sc{Tbb} default installation | Environment |
| `TBB_INCLUDE_DIRS` | Directory containing the `tbb/tbb.h` file | CMake |
| `TBB_LIBRARY_DIRS` | Directory(ies) containing the compiled TBB libraries | CMake |
| `TBB_LIBRARIES` | Full pathnames of the compiled TBB libraries (both release and debug versions, using "optimized" and "debug" CMake keywords). Note that if the debug versions are not found, the release versions will be used instead for the debug mode. | CMake |
| `TBB_RELEASE_LIBRARY` | Full pathname of the compiled TBB release library | CMake |
| `TBB_MALLOC_RELEASE_LIBRARY` | Full pathname of the compiled TBB release malloc library | CMake |
| `TBB_DEBUG_LIBRARY` | Full pathname of the compiled TBB debug library | CMake |
| `TBB_MALLOC_DEBUG_LIBRARY` | Full pathname of the compiled TBB debug malloc library | CMake |
| `TBB_MALLOCPROXY_DEBUG_LIBRARY` | Full pathname of the compiled TBB debug malloc_proxy library (optional) | CMake |
| `TBB_MALLOCPROXY_RELEASE_LIBRARY` | Full pathname of the compiled TBB release malloc_proxy library (optional) | CMake |

\section installation_compiler_workarounds Compiler Workarounds

A number of boolean flags are used to workaround compiler bugs and
limitations. They all start with the prefix `CGAL_CFG`. These
flags are used to work around compiler bugs and limitations. For
example, the flag `CGAL_CFG_NO_CPP0X_LONG_LONG` denotes
that the compiler does not know the type `long long`.

For each installation a file <TT><CGAL/compiler_config.h></TT>
is defined, with the correct
settings of all flags. This file is generated automatically by CMake,
and it is located in the `include` directory of where you run
CMake. For an in-source configuration this means
`CGAL-\cgalReleaseNumber``/include`.

The test programs used to generate the `compiler_config.h`
file can be found in `config/testfiles`.
Both
`compiler_config.h` and the test programs contain a short
description of the problem. In case of trouble with one of the
`CGAL_CFG` flags, it is a good idea to take a look at it.

The file `CGAL/compiler_config.h` is included from
`<CGAL/config.h>`.
which is included by all \cgal header files.

\section seccompileroptimisations Compiler Optimizations 

By default CMake generates makefiles for Release mode, with 
optimization flags switched on, and vcproj files for Release
and Debug modes.

*/ 
