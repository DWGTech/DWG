///This concept refers to the one described at http://www.sgi.com/tech/stl/Assignable.html.
///
///Using the latest concepts of the \cpp standard, a type that is a model of this concept
///is both <a href="http://en.cppreference.com/w/cpp/concept/CopyAssignable"><tt>CopyAssignable</tt></a>
///and <a href="http://en.cppreference.com/w/cpp/concept/CopyConstructible"><tt>CopyConstructible</tt></a>.
class Assignable {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/DefaultConstructible
class DefaultConstructible {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/CopyConstructible
class CopyConstructible {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/EqualityComparable
class EqualityComparable {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/LessThanComparable
class LessThanComparable {};

/// \cgalConcept
/// The concept AdaptableFunctor defines an adaptable functor, that is, a functor that can be
/// used with function object adaptors such as binders and composers.
///
class AdaptableFunctor {};
/// \cgalConcept
///This concept refers to the one described at  http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html.
class AdaptableUnaryFunction {};
/// \cgalConcept
///This concept refers to the one described at  http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html.
class AdaptableBinaryFunction {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/Iterator
class Iterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/OutputIterator
class OutputIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/InputIterator
class InputIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/ForwardIterator
class ForwardIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/RandomAccessIterator
class RandomAccessIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/BidirectionalIterator
class BidirectionalIterator {};

/// \cgalConcept
/// This concept refers to the one described at http://www.sgi.com/tech/stl/RandomAccessContainer.html.
///
/// It is a container that is a model of
/// <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer"><tt>ReversibleContainer</tt></a> and whose iterator type is a model of
/// <a href="http://en.cppreference.com/w/cpp/concept/RandomAccessIterator"><tt>RandomAccessIterator</tt></a>.
class RandomAccessContainer {};
/// \cgalConcept
/// This concepts refers to the one described at http://www.sgi.com/tech/stl/BackInsertionSequence.html.
///
/// It is a container that is a model of
/// <a href="http://en.cppreference.com/w/cpp/concept/SequenceContainer"><tt>SequenceContainer</tt></a>
/// that has the ability to append elements at the end of the sequence and to access the last element, both in amortized constant time.
class BackInsertionSequence {};

/*!
See http://www.boost.org/libs/property_map/doc/LvaluePropertyMap.html
\cgalConcept
*/
class LvaluePropertyMap {};

/*!
See http://www.boost.org/libs/property_map/doc/ReadWritePropertyMap.html
\cgalConcept
*/
class ReadWritePropertyMap {};

/*!
See http://www.boost.org/libs/property_map/doc/WritablePropertyMap.html
\cgalConcept
*/
class WritablePropertyMap {};

/*!
See http://www.boost.org/libs/property_map/doc/ReadablePropertyMap.html
\cgalConcept
*/
class ReadablePropertyMap {};

/*!
See http://www.boost.org/libs/range/doc/html/range/concepts/single_pass_range.html
\cgalConcept
*/
class SinglePassRange {};

/*!
See http://www.boost.org/libs/range/doc/html/range/concepts/random_access_range.html
\cgalConcept
*/
class RandomAccessRange {};

/*!
See http://www.boost.org/libs/range/doc/html/range/concepts/forward_range.html
\cgalConcept
*/
class ForwardRange {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/IncidenceGraph.html
\cgalConcept
*/
class IncidenceGraph {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/BidirectionalGraph.html
\cgalConcept
*/
class BidirectionalGraph {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/VertexAndEdgeListGraph.html
\cgalConcept
*/
class VertexAndEdgeListGraph {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/AdjacencyGraph.html
\cgalConcept
*/
class AdjacencyGraph {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/AdjacencyMatrix.html
\cgalConcept
*/
class AdjacencyMatrix {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/MutableGraph.html
\cgalConcept
*/
class MutableGraph {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/PropertyGraph.html
\cgalConcept
*/
class PropertyGraph {};

/*!
Concept from the Boost Graph Library.
See http://www.boost.org/libs/graph/doc/MutablePropertyGraph.html
\cgalConcept
*/
class MutablePropertyGraph {};

/*!
This indicates that the definition of a type nested in a class is not documented.
*/
class unspecified_type {};
